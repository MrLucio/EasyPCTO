{"version":3,"sources":["logo.svg","containers/NavBar/index.js","actions/Business.js","constants/actionTypes.js","app/routes/Homepage/index.js","app/routes/Business/index.js","app/routes/Settings/index.js","app/routes/Login/index.js","store/index.js","reducers/index.js","app/index.js","MainApp.js","serviceWorker.js","index.js"],"names":["module","exports","getHeight","DOMHelper","headerStyles","on","padding","fontSize","borderBottom","NavBar","props","state","expand","windowHeight","window","handleToggle","bind","this","setState","bodyStyle","height","Sidebar","style","display","flexDirection","collapsible","Sidenav","activeKey","appearance","Header","Icon","icon","size","verticalAlign","color","marginLeft","Body","Nav","Item","eventKey","active","componentClass","Link","to","React","Component","fetchBusinessesSuccess","businesses","type","payload","fetchBusinessesStarted","data","Homepage","Business","console","log","connect","items","ciaone","dispatch","axios","post","then","res","catch","err","settings","Login","middlewares","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","action","applyMiddleware","App","match","store","className","Container","exact","path","url","component","Settings","hot","Boolean","location","hostname","ReactDOM","render","document","getElementById"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,mPCMnCC,EAAkBC,IAAlBD,UAEFE,GAFoBD,IAAPE,GAEE,CACnBC,QAAS,sBAETC,SAAU,OACVC,aAAc,sBAsFDC,E,YA7Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAQ,EACRC,aAAcX,EAAUY,SAE1B,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,4EASjBC,KAAKC,SAAS,M,+BAKKD,KAAKN,MAAhBC,OADA,IAEJO,EAAY,CACdC,OAAQH,KAAKN,MAAME,cAErB,OACE,kBAACQ,EAAA,EAAD,CACEC,MAAO,CAAEC,QAAS,OAAQC,cAAe,UACzCC,aAAW,GAEX,kBAACC,EAAA,EAAD,CACEC,UAAU,IACVC,WAAW,UACXN,MAAQH,GAER,kBAACO,EAAA,EAAQG,OAAT,KACE,yBAAKP,MAAOlB,GACV,kBAAC0B,EAAA,EAAD,CAAMC,KAAK,QAAQC,KAAK,KAAKV,MAAO,CAAEW,cAAe,EAAGC,MAAO,aAC/D,0BAAMZ,MAAO,CAAEa,WAAY,KAA3B,eAGJ,kBAACT,EAAA,EAAQU,KAAT,KACE,kBAACC,EAAA,EAAD,CAAKT,WAAW,UACd,kBAACS,EAAA,EAAIC,KAAL,CACEC,SAAS,IACTC,QAAM,EACNT,KAAM,kBAACD,EAAA,EAAD,CAAMC,KAAK,cACjBU,eAAgBC,IAChBC,GAAG,KALL,QASA,kBAACN,EAAA,EAAIC,KAAL,CACEC,SAAS,IACTR,KAAM,kBAACD,EAAA,EAAD,CAAMC,KAAK,WACjBU,eAAgBC,IAChBC,GAAG,aAJL,yB,GA9COC,IAAMC,W,0BCdrBC,EAAyB,SAAAC,GAC3B,MAAO,CACHC,KCpBgC,2BDqBhCC,QAAQ,eACDF,KAKTG,EAAyB,SAAAC,GAC3B,MAAO,CACHH,KC5BgC,2BD6BhCC,QAAQ,eACDE,KE9BTC,E,4LAGEnC,KAAKP,MAAM2C,WACXC,QAAQC,IAAI,a,+BAYZ,OACI,kC,GAjBWX,IAAMC,WA0BdW,eAJS,SAAC7C,GACrB,MAAO,CAAE8C,MAAO9C,EAAM+C,UAGc,CAAEL,SFxBlB,WACpB,OAAO,SAAAM,GACHA,EAAST,KACTU,IACDC,KADC,6CACkD,IAEnDC,MAAK,SAAAC,GACFT,QAAQC,IAAIQ,MAEfC,OAAM,SAAAC,OAELN,EAASb,QEaFU,CAAuCJ,GC7BvC,SAASC,IACpB,OACI,8CCFO,SAASa,IACpB,OACI,8C,ICUOC,E,iLANP,OACI,0C,GALQvB,IAAMC,W,QCIpBuB,EAAc,C,OAACC,GACfC,EAAmBxD,OAAOyD,sCAAwCC,IAE3DC,EAAQC,aCXN,SAAC/D,EAAOgE,GACnB,OAAQA,EAAO3B,MACX,IAAK,SACD,OAAOrC,EACX,QACI,OAAO,eACAA,EADP,CAEI,IAAO,WDHF,CACjB,OAAU,SASV2D,EAAiBM,IAAe,WAAf,EAAmBR,K,SEsBzBS,EAtBH,SAAC,GAAY,IAAXC,EAAU,EAAVA,MACV,OACI,kBAAC,IAAD,CAAUC,MAAON,GACb,kBAAC,IAAD,KACI,yBAAKO,UAAU,IACX,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,UAAKL,EAAMM,KAAOC,UAAWjC,IAC9C,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAI,UAAKL,EAAMM,IAAX,YAA0BC,UAAWhC,IACtD,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAI,UAAKL,EAAMM,IAAX,YAA0BC,UAAWC,IACtD,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAI,UAAKL,EAAMM,IAAX,SAAuBC,UAAWlB,W,cCXpEoB,qBARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOJ,KAAK,IAAIE,UAAWR,Q,OCEbW,QACW,cAA7B1E,OAAO2E,SAASC,UAEe,UAA7B5E,OAAO2E,SAASC,UAEhB5E,OAAO2E,SAASC,SAASZ,MACvB,2DCXNa,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,W","file":"static/js/main.c0876fcf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Sidenav, Sidebar, Icon, Nav, Navbar, Dropdown, Header, Content, DOMHelper } from 'rsuite';\r\n\r\n//import { Layout, Menu, Icon } from 'antd';\r\nconst { getHeight, on } = DOMHelper;\r\n\r\nconst headerStyles = {\r\n  padding: \"20px 20px 20px 20px\",\r\n  //margin: \"0 20px 0 20px\",\r\n  fontSize: \"20px\",\r\n  borderBottom: \"1px solid #e5e5ea\",\r\n};\r\n\r\nconst iconStyles = {\r\n  width: 56,\r\n  height: 56,\r\n  lineHeight: '56px',\r\n  textAlign: 'center'\r\n};\r\n\r\nconst NavToggle = ({ expand, onChange }) => {\r\n  return (\r\n    <Navbar appearance=\"subtle\" className=\"nav-toggle\">\r\n      <Navbar.Body>\r\n        <Nav pullRight>\r\n          <Nav.Item onClick={onChange} style={{ width: 56, textAlign: 'center' }}>\r\n            <Icon icon={expand ? 'angle-left' : 'angle-right'} />\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Body>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nclass NavBar extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      expand: true,\r\n      windowHeight: getHeight(window)\r\n    };\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n  handleToggle() {\r\n    this.setState({\r\n      //expand: !this.state.expand\r\n    });\r\n  }\r\n  render() {\r\n    const { expand } = this.state;\r\n    let bodyStyle = {\r\n      height: this.state.windowHeight\r\n    }\r\n    return (\r\n      <Sidebar\r\n        style={{ display: 'flex', flexDirection: 'column' }}\r\n        collapsible\r\n      >\r\n        <Sidenav\r\n          activeKey=\"1\"\r\n          appearance=\"default\"\r\n          style={ bodyStyle }\r\n        >\r\n          <Sidenav.Header>\r\n            <div style={headerStyles}>\r\n              <Icon icon=\"check\" size=\"lg\" style={{ verticalAlign: 0, color: \"#16c60c\" }} />\r\n              <span style={{ marginLeft: 12 }}> EasyPCTO</span>\r\n            </div>\r\n          </Sidenav.Header>\r\n          <Sidenav.Body >\r\n            <Nav appearance=\"subtle\">\r\n              <Nav.Item\r\n                eventKey=\"1\"\r\n                active\r\n                icon={<Icon icon=\"dashboard\" />}\r\n                componentClass={Link}\r\n                to=\"/\"\r\n              >\r\n                Home\r\n              </Nav.Item>\r\n              <Nav.Item\r\n                eventKey=\"2\"\r\n                icon={<Icon icon=\"search\" />}\r\n                componentClass={Link}\r\n                to=\"/business\"\r\n              >\r\n                Trova azienda\r\n              </Nav.Item>\r\n            </Nav>\r\n          </Sidenav.Body>\r\n        </Sidenav>\r\n      </Sidebar>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default NavBar;","import {\r\n    FETCH_BUSINESSES_SUCCESS,\r\n    FETCH_BUSINESSES_STARTED,\r\n    FETCH_BUSINESSES_FAILURE\r\n} from '../constants/actionTypes';\r\nimport axios from \"axios\";\r\n\r\nexport const Business = () => {\r\n    return dispatch => {\r\n        dispatch(fetchBusinessesStarted());\r\n        axios\r\n      .post(`https://jsonplaceholder.typicode.com/todos`, {\r\n      })\r\n      .then(res => {\r\n          console.log(res)\r\n      })\r\n      .catch(err => {\r\n      });\r\n        dispatch(fetchBusinessesSuccess());\r\n    }\r\n}\r\n\r\nconst fetchBusinessesSuccess = businesses => {\r\n    return {\r\n        type: FETCH_BUSINESSES_SUCCESS,\r\n        payload: {\r\n            ...businesses\r\n        }\r\n    }\r\n}\r\n\r\nconst fetchBusinessesStarted = data => {\r\n    return {\r\n        type: FETCH_BUSINESSES_STARTED,\r\n        payload: {\r\n            ...data\r\n        }\r\n    }\r\n}\r\n\r\nconst fetchBusinessesFailure = error => {\r\n    return {\r\n        type: FETCH_BUSINESSES_FAILURE,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n","// Auth actions\r\n\r\n\r\n// Business actions\r\nexport const FETCH_BUSINESSES_SUCCESS = \"FETCH_BUSINESSES_SUCCESS\";\r\nexport const FETCH_BUSINESSES_STARTED = \"FETCH_BUSINESSES_STARTED\";\r\nexport const FETCH_BUSINESSES_FAILURE = \"FETCH_BUSINESSES_FAILURE\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Business } from \"actions/Business\";\r\nimport { Button, Sidenav, Nav, Icon, Dropdown } from 'rsuite';\r\n\r\nclass Homepage extends React.Component{\r\n\r\n    componentDidMount(){\r\n        this.props.Business();\r\n        console.log('beh dai')\r\n    }\r\n\r\n    render(){\r\n        \r\n        const headerStyles = {\r\n            padding: 20,\r\n            fontSize: 16,\r\n            background: '#34c3ff',\r\n            color: ' #fff'\r\n        };\r\n\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { items: state.ciaone };\r\n};\r\n\r\nexport default connect(mapStateToProps, { Business })(Homepage);","import React from 'react';\r\n\r\nexport default function Business(){\r\n    return (\r\n        <div>\r\n            Sono business\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function settings(){\r\n    return (\r\n        <div>\r\n            Sono settings\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Business } from 'actions/Business';\r\n\r\nclass Login extends React.Component{\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>hm kk</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport Reducer from '../reducers';\r\n\r\nconst initialState = {\r\n    'ciaone': 'dsasd'\r\n}\r\n\r\nconst middlewares = [thunk];\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const Store = createStore(\r\n    Reducer,\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(...middlewares))\r\n);","export default (state, action) => {\r\n    switch (action.type){\r\n        case \"NUN_ZO\":\r\n            return state;\r\n        default:\r\n            return {\r\n                ...state,\r\n                \"sis\": \"nos\"\r\n            };\r\n    }\r\n}","import React from 'react';\r\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport NavBar from 'containers/NavBar';\r\n\r\nimport Homepage from \"./routes/Homepage\";\r\nimport Business from \"./routes/Business\";\r\nimport Settings from \"./routes/Settings\";\r\nimport Login from \"./routes/Login\";\r\n\r\nimport { Store } from \"store\";\r\nimport { Container } from 'rsuite';\r\n\r\nconst App = ({match}) =>{\r\n    return (\r\n        <Provider store={Store}>\r\n            <Router>\r\n                <div className=\"\">\r\n                    <Container>\r\n                        <NavBar />\r\n                        <Container>\r\n                            <Switch>\r\n                                <Route exact path={`${match.url}`} component={Homepage}/>\r\n                                <Route exact path={`${match.url}business`} component={Business}/>\r\n                                <Route exact path={`${match.url}settings`} component={Settings}/>\r\n                                <Route exact path={`${match.url}login`} component={Login}/>\r\n                            </Switch>\r\n                        </Container>\r\n                    </Container>\r\n                </div>\r\n            </Router>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { hot } from 'react-hot-loader/root';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport App from './app';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction MainApp() {\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" component={App}/>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default hot(MainApp);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainApp from './MainApp';\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}